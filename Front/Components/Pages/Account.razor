@page "/account"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@inject UserService userService

<PageTitle>Your Account</PageTitle>

<AuthorizeView Roles="User">
    <Authorized Context="authContext">

        <h1>Account Options</h1>

        <br>
        <br>

        @if (user == null)
        {
            <p><em>Your data is being recovered, if the process takes more than 30 seconds, please contact technical support</em></p>
        }
        else
        {
            <EditForm Model="@userUpdate" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>Name : <InputText id="name" @bind-Value="userUpdate.Name" class="form-control" /></div>
                <div>Email : <InputText id="email" @bind-Value="userUpdate.Email" class="form-control" /></div>
                <div>Password : <InputText id="password" @bind-Value="userUpdate.Password" class="form-control" /></div>
                <button type="submit" class="btn btn-primary">Apply modifications</button>
            </EditForm>
        }

        <br>
        <br>

        <button class="btn btn-danger" @onclick="Delete">Delete your account</button>

    </Authorized>
    <NotAuthorized>
        Not Logged in
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserDTO? user;
    private UserUpdateModel userUpdate = new UserUpdateModel();

    protected override async Task OnInitializedAsync()
    {
        user = await userService.GetMyUserDTO();
        if (user != null)
        {
            userUpdate.Id = user.Id;
            userUpdate.Name = user.Name;
            userUpdate.Email = user.Email;
        }
    }

    private async Task HandleValidSubmit()
    {
        var updatedUser = await userService.UpdateUser(userUpdate);
        if (updatedUser != null)
        {
            user = updatedUser;
            userUpdate.Password = null; // Clear the password field after update
        }
    }

    private async void Delete()
    {
        // Kill the account
        await ((CustomAuthenticationStateProvider)authStateProvider).DeleteAccount();
        // Redirect the user to the register page
        NavigationManager.NavigateTo("/register");
    }
}
